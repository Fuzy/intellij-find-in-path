buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id "org.jetbrains.intellij" version "0.7.2"
}

group 'com.fuzy.idea'
version '1.0.13'

sourceCompatibility = 17

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.13'
    implementation 'com.yworks:yguard:4.0.0'
}

apply plugin: 'org.jetbrains.intellij'

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    version '2023.1'
}

/**
 * Simple function to load HTML files and remove the surrounding `<html>` tags. This is useful for maintaining changes-notes
 * and the description of plugins in separate HTML files which makes them much more readable.
 */
def htmlFixer = { filename ->
    if (!file(filename).exists()) {
        logger.error("File $filename not found.")
    } else {
        return file(filename).getText('UTF-8').replace("<html>", "").replace("</html>", "").trim()
    }
    return ""
}

def changeNotesHtml = htmlFixer("src/main/resources/META-INF/change-notes.html")
def pluginDescriptionHtml = htmlFixer("src/main/resources/META-INF/description.html")

patchPluginXml {
    changeNotes "${changeNotesHtml}"
    pluginDescription "${pluginDescriptionHtml}"
    sinceBuild '203.*'
    untilBuild '231.*'
}

ext {
    mainClassName = "com.fuzy.find.action.FindInPathChooseConfigAction"
}

tasks.buildSearchableOptions {
    enabled = false
}

// Proguard doesn't have support for Java11
task obfuscate {
    dependsOn jar
    group 'yGuard'
    description 'Obfuscates and shrinks the java archive.'

    doLast {
        ant.taskdef(
                name: 'yguard',
                classname: 'com.yworks.yguard.YGuardTask',
                classpath: sourceSets.main.runtimeClasspath.asPath
        )

        def archivePath = jar.archiveFile.get().asFile.path
        ant.yguard {
            inoutpair(in: archivePath, out: archivePath.replace(".jar", "-obf.jar"))

            externalClasses {
                pathelement(path: "${sourceSets.main.compileClasspath.asPath}")
            }

            shrink(logfile: "${buildDir}/yshrink.log.xml") {
                keep {
                    'class'(classes: 'public', methods: 'private')
                }
            }

            rename(mainclass: mainClassName, logfile: "${buildDir}/yguard.log.xml") {
                property(name: "error-checking", value: "pedantic")

                keep {
                    'class'(name: 'com.fuzy.find.persistence.ConfigurationManager')
                    'class'(name: 'com.fuzy.find.listener.FindWindowManagerListener')
                    'class'(name: 'com.fuzy.find.persistence.FindOption', methods: 'private', fields: 'private')
                    'class'(name: 'com.fuzy.find.persistence.FindOptions', methods: 'private', fields: 'private')
                    method(name: "com.fuzy.find.persistence.FindOptions getState()", 'class': 'com.fuzy.find.persistence.ConfigurationManager')
                    method(name: "void loadState(com.fuzy.find.persistence.FindOptions)", 'class': 'com.fuzy.find.persistence.ConfigurationManager')
                    field(name: 'LOG', 'class': 'com.fuzy.find.action.FindInPathChooseConfigAction')
                }
            }

        }
    }

}

jar.finalizedBy(project.tasks.obfuscate)

runPluginVerifier {
    distributionFile jar.archiveFile.get().asFile.path.replace(".jar", "-obf.jar")
    ideVersions(['IU-2023.1', 'IC-2023.1'])
}

test {
//    jvmArgs = ['--add-exports=java.desktop/sun.awt=ALL-UNNAMED', "--add-opens=java.base/jdk.internal.loader=ALL-UNNAMED"] //, '--add-opens=java.base/java.lang=ALL-UNNAMED'
}

